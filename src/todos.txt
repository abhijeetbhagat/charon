-check pop operations
-track block beginnings - Done
-unit test blocks - Done

-work on expressions - WIP
-learn type erasure
-learn traits from http://huonw.github.io

For your use case, you could do something like `fn visit<T: Visitable>(visitable: T)(self)`
and then have a trait Visitable that's impl'ed for each visitable type.+

-Add a method in block to add statements
-Use Cow for strings

-Move unit tests in submodules - mod test

-Tiger has forward symbol referencing:
/* define valid mutually recursive functions */
let

function do_nothing1(a: int, b: string):int=
		(do_nothing2(a+1);0)

function do_nothing2(d: int):string =
		(do_nothing1(d, "str");" ")

in
	do_nothing1(0, "str2")
end

Body of while is a unit type:
/* error : body of while not unit */
while(10 > 5) do 5+6

ifthen type is always unit while ifthenelse types can be anything and both should match

--------------------------------------------------------------------------------------------------

let
	function foo() = print("yo")
in
	foo()
end


**Use expr() instead of evaluable_expr()
**Allow underscores in idents
**do structured error handling

type-checking scenarios:
-type mismatch in assignments, func-decs, var-decs
-while expr type must be int, body type must be void
-var declared with type annotation but left hand expr type is different
-function call return type is different from left hand var type
-function return type is different from type of the last expression
-type mismatch in math expressions - plus, minus, etc

Macroize stuff in parse_for_expr

bluss	abhi: you can only downcast to the exact type inside the &Any / Box<Any>
abhi	bluss: which is Symbol in this case?
bluss	abhi: yeah
bluss	abhi: so for example something like this would work http://is.gd/ErqVWk
bluss	or the Symbol trait would need to have its own downcasting methods
bluss	(just like trait Error has)

-------------------------------------------------

To build libunwind from src first install dependencies:
sudo apt-get install dh-autoreconf
